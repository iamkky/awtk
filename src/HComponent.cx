//HEADERX(../awtk/HComponent.h, _HTE_HCOMPONENT_H_)
#include <abd/new.h>
#include <abd/string.h>
#include <abd/safe.h>
#include <string.h>
#include <helium/He.h>

//#define HCOMPONENT	struct HComponent_struct component
#include <abjson/json.h>

Class(HComponent) {
	void		(*add)(HComponent, HComponent);
	He		(*render)(HComponent);
	char		*id;
	JsonValue	attributes;
	HComponent	child;
	HComponent	last;
	HComponent	next;
};

Constructor(HComponent, JsonValue attributes);
Destructor(HComponent);

void hcomponentSetId(HComponent self, char *id);
char *hcomponentGetId(HComponent self);

char *hcomponentGetAttributeAsString(HComponent self, char *key);

void hcomponentAddChild(HComponent self, HComponent child);

He   hcomponentRender(HComponent self);

//ENDX

int static HComponentGlobalCounter = 0;

Constructor(HComponent, JsonValue attributes)
{
	CInit(HComponent);
	
	self->render = hcomponentRender;
	self->add = hcomponentAddChild;

	self->id = NULL;
	self->attributes = attributes;
	self->child = NULL;
	self->next = NULL;
	self->last = NULL;

	//self->id = strf("HCompBuiltInId_%d", HComponentGlobalCounter++);

	return self;
}

Destructor(HComponent)
{
HComponent ch, ch_next;

	if(nullAssert(self)) return;

	for(ch=self->child; ch!=NULL; ch=ch_next){
		ch_next = ch->next;
		CFree(HComponent, ch);
	}

	free(self);
}

void hcomponentSetId(HComponent self, char *id)
{
	if(nullAssert(self)) return;

	if(self->id) free(self->id);
	
	self->id = id ? strdup(id) : NULL;
}


char *hcomponentGetId(HComponent self)
{
	if(nullAssert(self)) return NULL;

	return self->id;
}

char *hcomponentGetAttributeAsString(HComponent self, char *key)
{
JsonValue	attr;
char		*value_as_string;

	if(nullAssert(self)) return NULL;
	if(nullAssert(key)) return NULL;

	if(self->attributes==NULL) return NULL;

	errLogf("YYYYYYY %S", key);
	errLogf("YYYYYYY %S", jsonValueGetAsString(self->attributes));
	attr = jsonValueGet_k(self->attributes, key);

	errLogf("ZZZZZZZ %S", jsonValueGetAsString(attr));

	if(attr==NULL) return NULL;

	return jsonValueGetAsString(attr);
}


void hcomponentAddChild(HComponent self, HComponent child)
{
	if(nullAssert(self)) return;
	if(nullAssert(child)) return;

	if(self->child==NULL){
		self->child = child;
		self->last  = child;
	}else{
		self->last->next = child;
		self->last       = child;
	}
}

He hcomponentRender(HComponent self)
{
He content;

	if(nullAssert(self)) return {% <div class="HComponent"> </div> %};

	if(self->render){
		content = self->render(self);
	}else{
		content = {% Hcomponent %};
	}
		
	return {% <div class="HComponent" id={self->id}> [content] </div> %};
}
